name: Deploy to ARO

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}
        
    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY_URL }}/task-manager-backend
        tags: |
          type=sha,format=short
          type=ref,event=branch
          latest
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./on-prem-app/backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/task-manager-backend:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/task-manager-backend:buildcache,mode=max

    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY_URL }}/task-manager-frontend
        tags: |
          type=sha,format=short
          type=ref,event=branch
          latest
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./on-prem-app/frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/task-manager-frontend:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/task-manager-frontend:buildcache,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
        
    - name: Authenticate with OpenShift
      run: |
        oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        
    - name: Deploy to ARO Development
      run: |
        export REGISTRY_URL=${{ env.REGISTRY_URL }}
        export IMAGE_TAG=sha-$(git rev-parse --short HEAD)
        
        # Create or update project
        oc new-project task-manager-dev 2>/dev/null || echo "Project exists"
        
        # Apply manifests with proper substitution
        envsubst < ./aro-templates/manifests/namespace.yaml | oc apply -f -
        envsubst < ./aro-templates/manifests/mongodb-deployment.yaml | oc apply -f -
        
        # Update image tags in deployment files and apply
        sed -i "s|image: \${REGISTRY_URL}/task-manager-backend:latest|image: ${REGISTRY_URL}/task-manager-backend:${IMAGE_TAG}|g" ./aro-templates/manifests/backend-deployment.yaml
        sed -i "s|image: \${REGISTRY_URL}/task-manager-frontend:latest|image: ${REGISTRY_URL}/task-manager-frontend:${IMAGE_TAG}|g" ./aro-templates/manifests/frontend-deployment.yaml
        
        envsubst < ./aro-templates/manifests/backend-deployment.yaml | oc apply -f -
        envsubst < ./aro-templates/manifests/frontend-deployment.yaml | oc apply -f -
        envsubst < ./aro-templates/manifests/api-route.yaml | oc apply -f -
        
    - name: Verify deployment
      run: |
        oc get pods -n task-manager-dev
        oc get routes -n task-manager-dev
        
    - name: Wait for deployment and check health
      run: |
        # Wait for backend deployment to roll out
        oc rollout status deployment/backend-api -n task-manager-dev --timeout=180s
        
        # Wait for frontend deployment to roll out
        oc rollout status deployment/frontend -n task-manager-dev --timeout=180s
        
        # Get the route URLs
        FRONTEND_URL=$(oc get route frontend-route -n task-manager-dev -o jsonpath='{.spec.host}')
        API_URL=$(oc get route api-route -n task-manager-dev -o jsonpath='{.spec.host}')
        
        # Check if services are responding
        curl -f -s https://${FRONTEND_URL} || echo "Frontend may not be ready yet"
        curl -f -s https://${API_URL}/health || echo "Backend may not be ready yet"
        
        echo "Application deployed to: https://${FRONTEND_URL}"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: ${{ steps.get-url.outputs.route-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
        
    - name: Authenticate with OpenShift
      run: |
        oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        
    - name: Deploy to ARO Staging
      run: |
        export REGISTRY_URL=${{ env.REGISTRY_URL }}
        export IMAGE_TAG=sha-$(git rev-parse --short HEAD)
        
        # Create or update project
        oc new-project task-manager-staging 2>/dev/null || echo "Project exists"
        
        # Apply all manifests with proper substitution
        find ./aro-templates/manifests -name "*.yaml" -exec bash -c 'envsubst < {} | sed "s/task-manager/task-manager-staging/g" | oc apply -f -' \;
        
        # Update image tags in deployment files
        oc set image deployment/backend-api backend-api=${REGISTRY_URL}/task-manager-backend:${IMAGE_TAG} -n task-manager-staging
        oc set image deployment/frontend frontend=${REGISTRY_URL}/task-manager-frontend:${IMAGE_TAG} -n task-manager-staging
    
    - name: Get Route URL
      id: get-url
      run: |
        ROUTE_URL=$(oc get route frontend-route -n task-manager-staging -o jsonpath='{.spec.host}')
        echo "route-url=https://$ROUTE_URL" >> $GITHUB_OUTPUT

    - name: Verify deployment health
      run: |
        oc rollout status deployment/backend-api -n task-manager-staging --timeout=180s
        oc rollout status deployment/frontend -n task-manager-staging --timeout=180s

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment:
      name: production
      url: ${{ steps.get-url.outputs.route-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
        
    - name: Authenticate with OpenShift
      run: |
        oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        
    - name: Deploy to ARO Production (Blue/Green strategy)
      run: |
        export REGISTRY_URL=${{ env.REGISTRY_URL }}
        export IMAGE_TAG=sha-$(git rev-parse --short HEAD)
        
        # Create or update project
        oc new-project task-manager-prod 2>/dev/null || echo "Project exists"
        
        # Blue/Green deployment for frontend
        # Check if we have a "blue" deployment
        if oc get deployment/frontend-blue -n task-manager-prod &>/dev/null; then
          # Blue exists, deploy to green
          echo "Blue deployment exists, deploying to Green"
          
          # Create or update green deployment
          cat ./aro-templates/manifests/frontend-deployment.yaml | 
            sed "s/task-manager/task-manager-prod/g" | 
            sed "s/name: frontend/name: frontend-green/g" |
            sed "s/app: frontend/app: frontend-green/g" |
            sed "s|image: \${REGISTRY_URL}/task-manager-frontend:latest|image: ${REGISTRY_URL}/task-manager-frontend:${IMAGE_TAG}|g" |
            oc apply -f -
          
          # Wait for green deployment to be ready
          oc rollout status deployment/frontend-green -n task-manager-prod --timeout=180s
          
          # Switch route to green
          oc patch route frontend-route -n task-manager-prod -p '{"spec":{"to":{"name":"frontend-green"}}}'
          
          # Delete old blue deployment after a delay to allow connections to drain
          sleep 30
          oc delete deployment/frontend-blue -n task-manager-prod
          
        else
          # Green exists or neither exists, deploy to blue
          echo "Green deployment exists or new deployment, deploying to Blue"
          
          # Delete green if it exists
          oc delete deployment/frontend-green -n task-manager-prod --ignore-not-found
          
          # Create blue deployment
          cat ./aro-templates/manifests/frontend-deployment.yaml | 
            sed "s/task-manager/task-manager-prod/g" | 
            sed "s/name: frontend/name: frontend-blue/g" |
            sed "s/app: frontend/app: frontend-blue/g" |
            sed "s|image: \${REGISTRY_URL}/task-manager-frontend:latest|image: ${REGISTRY_URL}/task-manager-frontend:${IMAGE_TAG}|g" |
            oc apply -f -
            
          # Wait for blue deployment to be ready
          oc rollout status deployment/frontend-blue -n task-manager-prod --timeout=180s
          
          # Create or patch route to point to blue
          if oc get route frontend-route -n task-manager-prod &>/dev/null; then
            oc patch route frontend-route -n task-manager-prod -p '{"spec":{"to":{"name":"frontend-blue"}}}'
          else
            cat ./aro-templates/manifests/frontend-deployment.yaml | 
              grep -A8 "kind: Route" | 
              sed "s/task-manager/task-manager-prod/g" | 
              sed "s/name: frontend/name: frontend-blue/g" |
              oc apply -f -
          fi
        fi
        
        # Regular deployment for backend and DB
        cat ./aro-templates/manifests/namespace.yaml | sed "s/task-manager/task-manager-prod/g" | oc apply -f -
        cat ./aro-templates/manifests/mongodb-deployment.yaml | sed "s/task-manager/task-manager-prod/g" | oc apply -f -
        cat ./aro-templates/manifests/backend-deployment.yaml | 
          sed "s/task-manager/task-manager-prod/g" | 
          sed "s|image: \${REGISTRY_URL}/task-manager-backend:latest|image: ${REGISTRY_URL}/task-manager-backend:${IMAGE_TAG}|g" |
          oc apply -f -
        cat ./aro-templates/manifests/api-route.yaml | sed "s/task-manager/task-manager-prod/g" | oc apply -f -
    
    - name: Get Route URL
      id: get-url
      run: |
        ROUTE_URL=$(oc get route frontend-route -n task-manager-prod -o jsonpath='{.spec.host}')
        echo "route-url=https://$ROUTE_URL" >> $GITHUB_OUTPUT

    - name: Verify production deployment health
      run: |
        oc rollout status deployment/backend-api -n task-manager-prod --timeout=180s
        
        # Check which frontend is active
        if oc get deployment/frontend-blue -n task-manager-prod &>/dev/null; then
          oc rollout status deployment/frontend-blue -n task-manager-prod --timeout=180s
        else
          oc rollout status deployment/frontend-green -n task-manager-prod --timeout=180s
        fi