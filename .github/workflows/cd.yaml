name: Deploy to ARO

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

env:
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}
        
    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY_URL }}/task-manager-backend
        tags: |
          type=sha,format=short
          type=ref,event=branch
          latest
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./on-prem-app/backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/task-manager-backend:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/task-manager-backend:buildcache,mode=max

    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY_URL }}/task-manager-frontend
        tags: |
          type=sha,format=short
          type=ref,event=branch
          latest
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./on-prem-app/frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/task-manager-frontend:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/task-manager-frontend:buildcache,mode=max

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: latest
        
    - name: Authenticate with OpenShift
      run: |
        oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        
    - name: Deploy to ARO Production (Blue/Green strategy)
      run: |
        export REGISTRY_URL=${{ env.REGISTRY_URL }}
        export IMAGE_TAG=sha-$(git rev-parse --short HEAD)
        
        # Create or update project
        oc new-project task-manager-prod 2>/dev/null || echo "Project exists"
        
        # Blue/Green deployment for frontend
        # Check if we have a "blue" deployment
        if oc get deployment/frontend-blue -n task-manager-prod &>/dev/null; then
          # Blue exists, deploy to green
          echo "Blue deployment exists, deploying to Green"
          
          # Create or update green deployment
          cat ./aro-templates/manifests/frontend-deployment.yaml | 
            sed "s/task-manager/task-manager-prod/g" | 
            sed "s/name: frontend/name: frontend-green/g" |
            sed "s/app: frontend/app: frontend-green/g" |
            sed "s|image: \${REGISTRY_URL}/task-manager-frontend:latest|image: ${REGISTRY_URL}/task-manager-frontend:${IMAGE_TAG}|g" |
            oc apply -f -
          
          # Wait for green deployment to be ready
          oc rollout status deployment/frontend-green -n task-manager-prod --timeout=180s
          
          # Switch route to green
          oc patch route frontend-route -n task-manager-prod -p '{"spec":{"to":{"name":"frontend-green"}}}'
          
          # Delete old blue deployment after a delay to allow connections to drain
          sleep 30
          oc delete deployment/frontend-blue -n task-manager-prod
          
        else
          # Green exists or neither exists, deploy to blue
          echo "Green deployment exists or new deployment, deploying to Blue"
          
          # Delete green if it exists
          oc delete deployment/frontend-green -n task-manager-prod --ignore-not-found
          
          # Create blue deployment
          cat ./aro-templates/manifests/frontend-deployment.yaml | 
            sed "s/task-manager/task-manager-prod/g" | 
            sed "s/name: frontend/name: frontend-blue/g" |
            sed "s/app: frontend/app: frontend-blue/g" |
            sed "s|image: \${REGISTRY_URL}/task-manager-frontend:latest|image: ${REGISTRY_URL}/task-manager-frontend:${IMAGE_TAG}|g" |
            oc apply -f -
            
          # Wait for blue deployment to be ready
          oc rollout status deployment/frontend-blue -n task-manager-prod --timeout=180s
          
          # Create or patch route to point to blue
          if oc get route frontend-route -n task-manager-prod &>/dev/null; then
            oc patch route frontend-route -n task-manager-prod -p '{"spec":{"to":{"name":"frontend-blue"}}}'
          else
            cat ./aro-templates/manifests/frontend-deployment.yaml | 
              grep -A8 "kind: Route" | 
              sed "s/task-manager/task-manager-prod/g" | 
              sed "s/name: frontend/name: frontend-blue/g" |
              oc apply -f -
          fi
        fi
        
        # Regular deployment for backend and DB
        cat ./aro-templates/manifests/namespace.yaml | sed "s/task-manager/task-manager-prod/g" | oc apply -f -
        cat ./aro-templates/manifests/mongodb-deployment.yaml | sed "s/task-manager/task-manager-prod/g" | oc apply -f -
        cat ./aro-templates/manifests/backend-deployment.yaml | 
          sed "s/task-manager/task-manager-prod/g" | 
          sed "s|image: \${REGISTRY_URL}/task-manager-backend:latest|image: ${REGISTRY_URL}/task-manager-backend:${IMAGE_TAG}|g" |
          oc apply -f -
        cat ./aro-templates/manifests/api-route.yaml | sed "s/task-manager/task-manager-prod/g" | oc apply -f -
    
    - name: Get Route URL
      id: get-url
      run: |
        ROUTE_URL=$(oc get route frontend-route -n task-manager-prod -o jsonpath='{.spec.host}')
        echo "route-url=https://$ROUTE_URL" >> $GITHUB_OUTPUT

    - name: Verify production deployment health
      run: |
        oc rollout status deployment/backend-api -n task-manager-prod --timeout=180s
        
        # Check which frontend is active
        if oc get deployment/frontend-blue -n task-manager-prod &>/dev/null; then
          oc rollout status deployment/frontend-blue -n task-manager-prod --timeout=180s
        else
          oc rollout status deployment/frontend-green -n task-manager-prod --timeout=180s
        fi